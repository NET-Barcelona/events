@page "/film-register"

@using ChustaSoft.Common.Helpers
@using DotnetBarcelona.Actors.Shared
@using DotnetBarcelona.Films.Shared
@using DotnetBarcelona.FilmsManager.WebUI.Client.Services

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@inject ActorsApiService ActorsApiService
@inject FilmsApiService FilmsApiService
@inject NavigationManager Navigation


<FluentCard>
    <FluentLabel Typo="Typography.Body" Color="@Color.Disabled">Film Name:</FluentLabel>
    <FluentTextField @bind-Value="filmCreationModel.Name" Label="Film Name" Required="true" />

    <FluentLabel Typo="Typography.Body" Color="@Color.Disabled">Film Release Date:</FluentLabel>
    <FluentDatePicker @bind-Value="filmCreationModel.ReleaseDate" Label="Release Date" />

    <FluentLabel Typo="Typography.Body" Color="@Color.Disabled">Film Categories:</FluentLabel>
    <FluentListbox TOption="FilmCategory"
                   Label="Select categories"
                   Items="@categories"
                   Id="categories-listbox"
                   Height="200px"
                   Width="300px"
                   OptionValue="@(c => ((int)c).ToString())"
                   OptionText="@(c => c.ToString())"
                   @bind-SelectedOption="@selectedFilmCategory" />

    <FluentLabel Typo="Typography.Body" Color="@Color.Disabled">Cast:</FluentLabel>
    <FluentListbox TOption="ActorDto"
                   Label="Select actors"
                   Items="@actors"
                   Id="actors-listbox"
                   Height="200px"
                   Width="300px"
                   OptionValue="@(c => c.Id.ToString())"
                   OptionText="@(c => c.Name)"
                   @bind-SelectedOption="@selectedActor" />

    <FluentStack HorizontalAlignment="HorizontalAlignment.Left" Class="actions-container">
        <FluentButton IconStart="@(new Icons.Regular.Size16.Save())" Appearance="Appearance.Accent" OnClick="OnAddFilm">Register</FluentButton>
    </FluentStack>
</FluentCard>


@code {

    private FilmCreation filmCreationModel = new FilmCreation();
    private List<FilmCategory> categories = [];
    private IEnumerable<ActorDto> actors = [];

    private FilmCategory selectedFilmCategory;
    private ActorDto? selectedActor;

    protected override async Task OnInitializedAsync()
    {
        categories = EnumsHelper.GetEnumList<FilmCategory>().ToList();
        actors = await ActorsApiService.GetAllActorsAsync();
    }

    private async Task OnAddFilm()
    {
        filmCreationModel.Categories = [selectedFilmCategory];
        filmCreationModel.Cast = [selectedActor.Id];

        await FilmsApiService.RegisterAsync(filmCreationModel);
        Navigation.NavigateTo("/");
    }
}
